
// [//]: # (This file is automatically generated. Do not edit. Edit the component JSON's instead.)
//! All of the components available in the library are listed below.
//! The components may be strung together in arbitrary directed graphs (called analyses), and only verifiably DP analyses and data are released.
//!
//! | Component ID | Bindings Name | Inputs |
//! |--------------|---------------|--------|  
//! | [Add](../../proto/struct.Add.html) | add | `left`, `right` |  
//! | [Cast](../../proto/struct.Cast.html) | cast | `data`, `lower`, `true_label`, `type`, `upper` |  
//! | [Clamp](../../proto/struct.Clamp.html) | clamp | `categories`, `data`, `lower`, `null_value`, `upper` |  
//! | [Count](../../proto/struct.Count.html) | count | `data` |  
//! | [Covariance](../../proto/struct.Covariance.html) | covariance | `data`, `finite_sample_correction`, `left`, `right` |  
//! | [Digitize](../../proto/struct.Digitize.html) | digitize | `data`, `edges`, `inclusive_left`, `null_value` |  
//! | [Divide](../../proto/struct.Divide.html) | divide | `left`, `right` |  
//! | [DPCount](../../proto/struct.DPCount.html) | dp_count | `data`, `enforce_constant_time`, `implementation`, `lower`, `privacy_usage`, `upper` |  
//! | [DPCovariance](../../proto/struct.DPCovariance.html) | dp_covariance | `data`, `finite_sample_correction`, `implementation`, `left`, `privacy_usage`, `right` |  
//! | [DPHistogram](../../proto/struct.DPHistogram.html) | dp_histogram | `categories`, `data`, `edges`, `enforce_constant_time`, `implementation`, `inclusive_left`, `lower`, `null_value`, `privacy_usage`, `upper` |  
//! | [DPMaximum](../../proto/struct.DPMaximum.html) | dp_maximum | `data`, `implementation`, `privacy_usage` |  
//! | [DPMean](../../proto/struct.DPMean.html) | dp_mean | `data`, `implementation`, `privacy_usage` |  
//! | [DPMedian](../../proto/struct.DPMedian.html) | dp_median | `data`, `implementation`, `interpolation`, `privacy_usage` |  
//! | [DPMinimum](../../proto/struct.DPMinimum.html) | dp_minimum | `data`, `implementation`, `privacy_usage` |  
//! | [DPMomentRaw](../../proto/struct.DPMomentRaw.html) | dp_moment_raw | `data`, `implementation`, `order`, `privacy_usage` |  
//! | [DPSum](../../proto/struct.DPSum.html) | dp_sum | `data`, `implementation`, `privacy_usage` |  
//! | [DPVariance](../../proto/struct.DPVariance.html) | dp_variance | `data`, `finite_sample_correction`, `implementation`, `privacy_usage` |  
//! | [Equal](../../proto/struct.Equal.html) | equal | `left`, `right` |  
//! | [Filter](../../proto/struct.Filter.html) | filter | `data`, `mask` |  
//! | [GaussianMechanism](../../proto/struct.GaussianMechanism.html) | gaussian_mechanism | `data`, `privacy_usage` |  
//! | [GreaterThan](../../proto/struct.GreaterThan.html) | greater_than | `left`, `right` |  
//! | [Histogram](../../proto/struct.Histogram.html) | histogram | `categories`, `data`, `edges`, `inclusive_left`, `null_value` |  
//! | [Impute](../../proto/struct.Impute.html) | impute | `categories`, `data`, `distribution`, `lower`, `scale`, `shift`, `upper`, `weights` |  
//! | [Index](../../proto/struct.Index.html) | index | `columns`, `data` |  
//! | [KthRawSampleMoment](../../proto/struct.KthRawSampleMoment.html) | kth_raw_sample_moment | `data`, `k` |  
//! | [LaplaceMechanism](../../proto/struct.LaplaceMechanism.html) | laplace_mechanism | `data`, `privacy_usage` |  
//! | [LessThan](../../proto/struct.LessThan.html) | less_than | `left`, `right` |  
//! | [Literal](../../proto/struct.Literal.html) | literal |  |  
//! | [Log](../../proto/struct.Log.html) | log | `base`, `data` |  
//! | [And](../../proto/struct.And.html) | logical_and | `left`, `right` |  
//! | [Or](../../proto/struct.Or.html) | logical_or | `left`, `right` |  
//! | [Materialize](../../proto/struct.Materialize.html) | materialize | `column_names`, `data_source`, `dataset_id`, `public`, `skip_row` |  
//! | [Maximum](../../proto/struct.Maximum.html) | maximum | `data` |  
//! | [Mean](../../proto/struct.Mean.html) | mean | `data` |  
//! | [Minimum](../../proto/struct.Minimum.html) | minimum | `data` |  
//! | [Modulo](../../proto/struct.Modulo.html) | modulo | `left`, `right` |  
//! | [Multiply](../../proto/struct.Multiply.html) | multiply | `left`, `right` |  
//! | [Negate](../../proto/struct.Negate.html) | negate | `data` |  
//! | [Negative](../../proto/struct.Negative.html) | negative | `data` |  
//! | [Partition](../../proto/struct.Partition.html) | partition | `by`, `data`, `num_partitions` |  
//! | [Power](../../proto/struct.Power.html) | power | `data`, `radical` |  
//! | [Quantile](../../proto/struct.Quantile.html) | quantile | `data`, `interpolation`, `quantile` |  
//! | [Reshape](../../proto/struct.Reshape.html) | reshape | `data`, `layout`, `shape`, `symmetric` |  
//! | [Resize](../../proto/struct.Resize.html) | resize | `categories`, `data`, `distribution`, `lower`, `n`, `scale`, `shift`, `upper`, `weights` |  
//! | [SimpleGeometricMechanism](../../proto/struct.SimpleGeometricMechanism.html) | simple_geometric_mechanism | `data`, `enforce_constant_time`, `lower`, `privacy_usage`, `upper` |  
//! | [Subtract](../../proto/struct.Subtract.html) | subtract | `left`, `right` |  
//! | [Sum](../../proto/struct.Sum.html) | sum | `data` |  
//! | [ToBool](../../proto/struct.ToBool.html) | to_bool | `data`, `true_label` |  
//! | [ToFloat](../../proto/struct.ToFloat.html) | to_float | `data` |  
//! | [ToInt](../../proto/struct.ToInt.html) | to_int | `data`, `lower`, `upper` |  
//! | [ToString](../../proto/struct.ToString.html) | to_string | `data` |  
//! | [Variance](../../proto/struct.Variance.html) | variance | `data`, `finite_sample_correction` |  