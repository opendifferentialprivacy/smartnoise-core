{
  "arguments": {
    "left": {
      "type_value": "Array",
      "default_python": "None",
      "default_rust": "None",
      "description": "Left data array used to calculate cross-covariance matrix. Used only if `data` not provided."
    },
    "right": {
      "type_value": "Array",
      "default_python": "None",
      "default_rust": "None",
      "description": "Right data array used to calculate cross-covariance matrix. Used only if `data` not provided."
    },
    "data": {
      "type_value": "Array",
      "default_python": "None",
      "default_rust": "None",
      "description": "2D data array used to construct covariance matrix."
    }
  },
  "id": "DPCovariance",
  "name": "dp_covariance",
  "options": {
    "mechanism": {
      "type_proto": "string",
      "type_rust": "String",
      "default_python": "\"Laplace\"",
      "default_rust": "String::from(\"Laplace\")",
      "description": "Privatizing mechanism to use. One of [`Laplace`, `Gaussian`]"
    },
    "privacy_usage": {
      "type_proto": "repeated PrivacyUsage",
      "type_rust": "Vec<proto::PrivacyUsage>",
      "default_python": "None",
      "description": "Object describing the type and amount of privacy to be used for the mechanism release."
    },
    "finite_sample_correction": {
      "type_proto": "bool",
      "type_rust": "bool",
      "default_python": "True",
      "default_rust": "true",
      "description": "Whether or not to use the finite sample correction (Bessel's correction)."
    }
  },
  "return": {
    "type_value": "Array",
    "description": "Flattened covariance or cross-covariance matrix."
  },
  "description": "Calculate differentially private covariance.\n\nIf `data` argument is provided as a 2D array, calculate covariance matrix. Otherwise, `left` and `right` 1D arrays are used to calculate a cross-covariance matrix between elements of the two arrays."
}