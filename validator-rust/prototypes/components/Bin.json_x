{
  "arguments": {
    "data": {
      "nature": [
        "continuous",
        "categorical"
      ],
      "type_value": "Array",
      "description": "Data to be binned."
    },
    "edges": {
      "nature": [
        "continuous",
        "categorical"
      ],
      "type_value": "Jagged",
      "description": "Values representing the edges of bins."
    },
    "null_value": {
      "nature": [
        "continuous",
        "categorical"
      ],
      "type_value": "Array",
      "description": "Value to which to map if there is no valid bin (e.g. if the element falls outside the bin range)."
    },
    "inclusive_left": {
      "type_value": "Array",
      "default_python": "True",
      "default_rust": "true",
      "description": "Whether or not the left edge of the bin is inclusive. If `true` bins are of the form [lower, upper). Otherwise, bins are of the form (lower, upper]."
    }
  },
  "id": "Bin",
  "name": "bin",
  "options": {
    "side": {
      "type_proto": "string",
      "default_python": "'lower'",
      "default_rust": "\"lower\"",
      "description": "How to refer to each bin. Will be either the `lower` edge, the `upper` edge, or the `midpoint` (the arithmetic mean of the two)."
    }
  },
  "return": {
    "nature": [
      "continuous"
    ],
    "type_value": "Array"
  },
  "description": "Maps data to bins.\n\nBins will be of the form [lower, upper) or (lower, upper]."
}